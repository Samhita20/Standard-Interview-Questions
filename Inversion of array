Inversion of array

Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.

def inversionCount(a,n):
    # Your Code Here
    temp = [0]*n
    return mergeSort(a,temp,0,n-1)
def mergeSort(a,temp,left,right):
    inv_count = 0
    if(left<right):
        mid = (left+right)//2
        inv_count += mergeSort(a,temp,left,mid)
        inv_count += mergeSort(a,temp,mid+1,right)
        inv_count += merge(a,temp,left,mid,right)
    return inv_count
def merge(a,temp,left,mid,right):
    i = left
    j = mid+1
    k = left
    inv_count = 0
    while(i<=mid and j<=right):
        if(a[i]<=a[j]):
            temp[k] = a[i]
            k += 1
            i += 1
        else:
            temp[k] = a[j]
            inv_count += (mid-i+1)
            k += 1
            j += 1
    while(i<=mid):
        temp[k] = a[i]
        k += 1
        i += 1
    while(j<=right):
        temp[k] = a[j]
        k += 1
        j += 1
    for x in range(left,right+1):
        a[x] = temp[x]
    return inv_count
